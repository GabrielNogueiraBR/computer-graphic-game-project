using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

public class GLMaps : MonoBehaviour
{
    public Material mat;
    public Vector2 sb;
    public float velo = 0.03f;
    float direcao = 1;
    Sentido sentidoMovimentacao = Sentido.Vertical;
    private float proportion = 0.1f;
    float personagemJogoX = 0;
    float personagemJogoY = 0;
    public List<Parede> ParedesMapa = new List<Parede>();
    public Parede Chegada;

    float larguraParede = 1f;
    float larguraCaminho = 2.5f;

    float coordenadaInicialX = 0.5f;
    float coordenadaInicialY = -3;
    float coordenadaInicialZ = 0;

    public void Start() {
        sb = Camera.main.ScreenToWorldPoint(new Vector2(Screen.width, Screen.height));      
    }

    public void FixedUpdate() {
        sb = Camera.main.ScreenToWorldPoint(new Vector2(Screen.width, Screen.height));
       
        if (Input.GetKey(KeyCode.LeftArrow))
        {
            sentidoMovimentacao = Sentido.Horizontal;
            direcao = -1;
            if (!ColisaoHorizontal())
            {
                personagemJogoX -= velo;
                transform.position = new Vector3(personagemJogoX, personagemJogoY, -10);
            }
        }
        else if (Input.GetKey(KeyCode.RightArrow))
        {
            sentidoMovimentacao = Sentido.Horizontal;
            direcao = 1;

            if (!ColisaoHorizontal())
            {
                personagemJogoX += velo;
                transform.position = new Vector3(personagemJogoX, personagemJogoY, -10);
            }
        }
        else if(Input.GetKey(KeyCode.UpArrow))
        {
            sentidoMovimentacao = Sentido.Vertical;
            direcao = 1;

            if (!ColisaoVertical())
            {
                personagemJogoY += velo;
                transform.position = new Vector3(personagemJogoX, personagemJogoY, -10);
            }
        }
        else if (Input.GetKey(KeyCode.DownArrow))
        {
            sentidoMovimentacao = Sentido.Vertical;
            direcao = -1;

            if (!ColisaoVertical())
            {
                personagemJogoY -= velo;
                transform.position = new Vector3(personagemJogoX, personagemJogoY, -10);
            }
        }

        if (ColisaoChegada())
        {
            personagemJogoX = 0;
            personagemJogoY = 0;

            transform.position = new Vector3(personagemJogoX, personagemJogoY, -10);
        }
    }

    private bool ColisaoHorizontal()
    {
        return ParedesMapa.Where(parede =>
        {
            Ponto v1 = parede.Vertice1;
            Ponto v2;

            if ((parede.Vertice1.Y != parede.Vertice2.Y) && (parede.Vertice1.X != parede.Vertice2.X))
            {
                v2 = parede.Vertice2;
            }
            else if ((parede.Vertice1.Y != parede.Vertice3.Y) && (parede.Vertice1.X != parede.Vertice3.X))
            {
                v2 = parede.Vertice3;
            }
            else
            {
                v2 = parede.Vertice4;
            }

            bool vertical = ((personagemJogoY >= v1.Y) && (personagemJogoY <= v2.Y)) || ((personagemJogoY >= v2.Y) && (personagemJogoY <= v1.Y));

            bool horizontal = ((personagemJogoX + (velo * direcao) >= v1.X) && (personagemJogoX + (velo * direcao) <= v2.X)) || ((personagemJogoX + (velo * direcao) >= v2.X) && (personagemJogoX + (velo * direcao) <= v1.X));

            if (vertical && horizontal)
                return true;
            return false;
        }
        ).Any();
    }

    private bool ColisaoVertical()
    {
        return ParedesMapa.Where(parede =>
        {
            Ponto v1 = parede.Vertice1;
            Ponto v2;

            if ((parede.Vertice1.Y != parede.Vertice2.Y) && (parede.Vertice1.X != parede.Vertice2.X))
            {
                v2 = parede.Vertice2;
            }
            else if ((parede.Vertice1.Y != parede.Vertice3.Y) && (parede.Vertice1.X != parede.Vertice3.X))
            {
                v2 = parede.Vertice3;
            }
            else
            {
                v2 = parede.Vertice4;
            }

            bool vertical = ((personagemJogoY + (velo * direcao) >= v1.Y) && (personagemJogoY + (velo * direcao) <= v2.Y)) || ((personagemJogoY + (velo * direcao) >= v2.Y) && (personagemJogoY + (velo * direcao) <= v1.Y));

            bool horizontal = ((personagemJogoX >= v1.X) && (personagemJogoX  <= v2.X)) || ((personagemJogoX  >= v2.X) && (personagemJogoX  <= v1.X));

            if (vertical && horizontal)
                return true;
            return false;
        }
        ).Any();
    }

    private bool ColisaoChegada()
    {
        Ponto v1 = Chegada.Vertice1;
        Ponto v2;

        if ((Chegada.Vertice1.Y != Chegada.Vertice2.Y) && (Chegada.Vertice1.X != Chegada.Vertice2.X))
        {
            v2 = Chegada.Vertice2;
        }
        else if ((Chegada.Vertice1.Y != Chegada.Vertice3.Y) && (Chegada.Vertice1.X != Chegada.Vertice3.X))
        {
            v2 = Chegada.Vertice3;
        }
        else
        {
            v2 = Chegada.Vertice4;
        }

        bool vertical = ((personagemJogoY >= v1.Y) && (personagemJogoY <= v2.Y)) || ((personagemJogoY >= v2.Y) && (personagemJogoY <= v1.Y));

        bool horizontal = ((personagemJogoX + (velo * direcao) >= v1.X) && (personagemJogoX + (velo * direcao) <= v2.X)) || ((personagemJogoX + (velo * direcao) >= v2.X) && (personagemJogoX + (velo * direcao) <= v1.X));

        if (vertical && horizontal)
            return true;

        return false;

    }

    private void OnPostRender() {

        CreateMap();

        if (sentidoMovimentacao == Sentido.Horizontal)
            PersonagemJogo_Horizontal();
        else
            PersonagemJogo_Vertical();        
    }

    void CreateMap()
    {
        BarDown(coordenadaInicialX,coordenadaInicialY,coordenadaInicialZ);
        BarRight(coordenadaInicialX, coordenadaInicialY, coordenadaInicialZ);
        BarLeft(coordenadaInicialX, coordenadaInicialY, coordenadaInicialZ);
        BarTop(coordenadaInicialX, coordenadaInicialY, coordenadaInicialZ);

    }

    void BarDown(float x, float y, float z)
    {
        #region Entrada
        Parede Entrada;

        Entrada = new Parede();
        Entrada.AdicionaVertices(-larguraCaminho,+larguraCaminho,0,larguraParede);
        Entrada.DefineCoordenadasIniciais(x, y);
        StartGL_Quads();
        GL.Color(new Color(84/255f, 119/255f, 60/255f));
        Entrada.CriarParede();
        EndGLPopMatrix();
        ParedesMapa.Add(Entrada);
        #endregion

        #region ParedeUnidade1
        Parede ParedeUnidade1 = new Parede();
        ParedeUnidade1.Sentido = Sentido.Horizontal;
        Ponto ponto = new Ponto(x,y);
        
        StartGL_Quads();
        GL.Color(new Color(0.33f, 0.47f, 0.23f));
        
        ponto.addX(-21);        
        ParedeUnidade1.AdicionarVertice1(ponto);

        ponto.addY(larguraParede);       
        ParedeUnidade1.AdicionarVertice2(ponto);

        ponto.addX(21 - larguraCaminho);        
        ParedeUnidade1.AdicionarVertice3(ponto);

        ponto.addY(-larguraParede);        
        ParedeUnidade1.AdicionarVertice4(ponto);

        ParedeUnidade1.CriarParede();
        
        EndGLPopMatrix();
        ParedesMapa.Add(ParedeUnidade1);
        #endregion        

        #region ParedeUnidade2
        Parede ParedeUnidade2 = new Parede();
        ParedeUnidade2.Sentido = Sentido.Vertical;
        Ponto ponto2 = new Ponto(x, y);

        StartGL_Quads();
        GL.Color(new Color(0.33f, 0.47f, 0.23f));

        ponto2.addX(-larguraCaminho - larguraParede);
        ponto2.addY(larguraParede);
        ParedeUnidade2.AdicionarVertice1(ponto2);

        ponto2.addX(+larguraParede);
        ParedeUnidade2.AdicionarVertice2(ponto2);

        ponto2.addY(7);
        ParedeUnidade2.AdicionarVertice3(ponto2);

        ponto2.addX(-larguraParede);
        ParedeUnidade2.AdicionarVertice4(ponto2);

        ParedeUnidade2.CriarParede();
        
        EndGLPopMatrix();
        ParedesMapa.Add(ParedeUnidade2);

        #endregion

        #region ParedeUnidade3
        Parede ParedeUnidade3 = new Parede();
        ParedeUnidade3.Sentido = Sentido.Horizontal;

        Ponto ponto3 = new Ponto(x, y);

        ponto3.addX(-larguraCaminho - larguraParede);
        ponto3.addY(larguraParede + 7);
        ParedeUnidade3.AdicionarVertice1(ponto3);

        ponto3.addX(-7);
        ParedeUnidade3.AdicionarVertice2(ponto3);

        ponto3.addY(-larguraParede);
        ParedeUnidade3.AdicionarVertice3(ponto3);

        ponto3.addX(+7);
        ParedeUnidade3.AdicionarVertice4(ponto3);


        StartGL_Quads();
        GL.Color(new Color(0.33f, 0.47f, 0.23f));
        ParedeUnidade3.CriarParede();
        EndGLPopMatrix();

        ParedesMapa.Add(ParedeUnidade3);
        #endregion

        #region ParedeUnidade4
        Parede ParedeUnidade4 = new Parede();
        
        ParedeUnidade4.AdicionaVertices(larguraCaminho, larguraCaminho + larguraParede, larguraParede, larguraParede + 14);
        ParedeUnidade4.DefineCoordenadasIniciais(x, y);

        StartGL_Quads();
        GL.Color(new Color(0.33f, 0.47f, 0.23f));
        ParedeUnidade4.CriarParede();
        EndGLPopMatrix();

        ParedesMapa.Add(ParedeUnidade4);
        #endregion
              
        #region ParedeUnidade5
        Parede ParedeUnidade5 = new Parede();
        ParedeUnidade5.Sentido = Sentido.Vertical;
        Ponto ponto5 = new Ponto(x, y);

        StartGL_Quads();
        GL.Color(new Color(0.33f, 0.47f, 0.23f));

        ponto5.addX(14);
        ParedeUnidade5.AdicionarVertice1(ponto5);

        ponto5.addY(larguraParede);
        ParedeUnidade5.AdicionarVertice2(ponto5);

        ponto5.addX(larguraCaminho - 14);
        ParedeUnidade5.AdicionarVertice3(ponto5);

        ponto5.addY(-larguraParede);
        ParedeUnidade5.AdicionarVertice4(ponto5);

        ParedeUnidade5.CriarParede();

        EndGLPopMatrix();
        ParedesMapa.Add(ParedeUnidade5);
        #endregion
    }
     
    void BarRight(float x, float y, float z)
    {
        #region ParedeUnidade1
        Parede ParedeUnidade1 = new Parede();
        ParedeUnidade1.AdicionaVertices(14,14-larguraParede,larguraParede,larguraParede+35);
        ParedeUnidade1.DefineCoordenadasIniciais(x, y);

        StartGL_Quads();
        GL.Color(new Color(0.33f, 0.47f, 0.23f));
        ParedeUnidade1.CriarParede();
        EndGLPopMatrix();

        ParedesMapa.Add(ParedeUnidade1);
        #endregion

        Parede ParedeUnidade2 = new Parede();
        ParedeUnidade2.AdicionaVertices(14 - larguraParede, 14 - larguraParede - 7, larguraParede + 27, larguraParede + 27 + larguraParede);
        ParedeUnidade2.DefineCoordenadasIniciais(x, y);
        StartGL_Quads();
        GL.Color(new Color(0.33f, 0.47f, 0.23f));
        ParedeUnidade2.CriarParede();
        EndGLPopMatrix();
        ParedesMapa.Add(ParedeUnidade2);
    }

    void BarLeft(float x, float y, float z)
    {
        Parede ParedeUnidade1 = new Parede();
        ParedeUnidade1.AdicionaVertices(-21,-21+larguraParede,larguraParede,larguraParede+35);
        ParedeUnidade1.DefineCoordenadasIniciais(x, y);

        StartGL_Quads();
        GL.Color(new Color(0.33f, 0.47f, 0.23f));
        ParedeUnidade1.CriarParede();
        EndGLPopMatrix();
        ParedesMapa.Add(ParedeUnidade1);

        Parede ParedeUnidade2 = new Parede();
        ParedeUnidade2.AdicionaVertices(-21 + larguraParede, -21 + larguraParede + 10, larguraParede + 13, larguraParede + 13 + larguraParede);
        ParedeUnidade2.DefineCoordenadasIniciais(x, y);

        StartGL_Quads();
        GL.Color(new Color(0.33f, 0.47f, 0.23f));
        ParedeUnidade2.CriarParede();
        EndGLPopMatrix();
        ParedesMapa.Add(ParedeUnidade2);

        Parede ParedeUnidade3 = new Parede();
        ParedeUnidade3.AdicionaVertices(-21 + larguraParede + 5, -21 + larguraParede + 5 + larguraParede, larguraParede + 13, larguraParede + 13 - 6 - larguraParede);
        ParedeUnidade3.DefineCoordenadasIniciais(x, y);

        StartGL_Quads();
        GL.Color(new Color(0.33f, 0.47f, 0.23f));
        ParedeUnidade3.CriarParede();
        EndGLPopMatrix();
        ParedesMapa.Add(ParedeUnidade3);

        Parede ParedeUnidade4 = new Parede();
        ParedeUnidade4.AdicionaVertices(-21 + 10, -21 + 10 + larguraParede, larguraParede + 13 + larguraParede, larguraParede + 13 + larguraParede + 7);
        ParedeUnidade4.DefineCoordenadasIniciais(x, y);

        StartGL_Quads();
        GL.Color(new Color(0.33f, 0.47f, 0.23f));
        ParedeUnidade4.CriarParede();
        EndGLPopMatrix();
        ParedesMapa.Add(ParedeUnidade4);

    }

    void BarTop(float x, float y, float z)
    {

        #region Chegada
        Parede C = new Parede();
        C.AdicionaVertices(-21 + larguraParede + 14 - larguraCaminho, 14 - larguraParede - 20 + larguraCaminho, 35, 35 + larguraParede);
        C.DefineCoordenadasIniciais(x, y);
        StartGL_Quads();
        GL.Color(new Color(177/255f, 129/255f, 73/255f));
        C.CriarParede();
        EndGLPopMatrix();
        Chegada = C;

        #endregion

        Parede p;

        p = new Parede();
        p.AdicionaVertices(-21 + larguraParede, -21 + larguraParede + 14 - larguraCaminho, 35, 35 + larguraParede);
        p.DefineCoordenadasIniciais(x, y);
        StartGL_Quads();
        GL.Color(new Color(0.33f, 0.47f, 0.23f));
        p.CriarParede();
        EndGLPopMatrix();
        ParedesMapa.Add(p);

        p = new Parede();
        p.AdicionaVertices(14 - larguraParede, 14 - larguraParede - 20 + larguraCaminho, 35, 35 + larguraParede);
        p.DefineCoordenadasIniciais(x, y);
        StartGL_Quads();
        GL.Color(new Color(0.33f, 0.47f, 0.23f));
        p.CriarParede();
        EndGLPopMatrix();
        ParedesMapa.Add(p);

        p = new Parede();
        p.AdicionaVertices(14 - larguraParede - 13, 14 - larguraParede - 13 - larguraParede, 35, 35 - 14);
        p.DefineCoordenadasIniciais(x, y);
        StartGL_Quads();
        GL.Color(new Color(0.33f, 0.47f, 0.23f));
        p.CriarParede();
        EndGLPopMatrix();
        ParedesMapa.Add(p);

        p = new Parede();
        p.AdicionaVertices(14 - larguraParede - 13 - larguraParede, 14 - larguraParede - 13 - larguraParede - 5, 35 - 14, 35 - 14 + larguraParede);
        p.DefineCoordenadasIniciais(x, y);
        StartGL_Quads();
        GL.Color(new Color(0.33f, 0.47f, 0.23f));
        p.CriarParede();
        EndGLPopMatrix();
        ParedesMapa.Add(p);

        p = new Parede();
        p.AdicionaVertices(14 - larguraParede - 13 - 5, 14 - larguraParede - 13 - 5 - larguraParede, 35 - 14, 35 - 14 - 7);
        p.DefineCoordenadasIniciais(x, y);
        StartGL_Quads();
        GL.Color(new Color(0.33f, 0.47f, 0.23f));
        p.CriarParede();
        EndGLPopMatrix();
        ParedesMapa.Add(p);

        p = new Parede();
        p.AdicionaVertices(14 - larguraParede - 13 - 5, 14 - larguraParede - 13 - 5 - larguraParede, 35 - 14, 35 - 14 + 7);
        p.DefineCoordenadasIniciais(x, y);
        StartGL_Quads();
        GL.Color(new Color(0.33f, 0.47f, 0.23f));
        p.CriarParede();
        EndGLPopMatrix();
        ParedesMapa.Add(p);

        p = new Parede();
        p.AdicionaVertices(14 - larguraParede - 13 - 5 - larguraParede, 14 - larguraParede - 13 - 5 - larguraParede - 10, 35 - 14 + 7, 35 - 14 + 7 - larguraParede);
        p.DefineCoordenadasIniciais(x, y);
        StartGL_Quads();
        GL.Color(new Color(0.33f, 0.47f, 0.23f));
        p.CriarParede();
        EndGLPopMatrix();
        ParedesMapa.Add(p);

        p = new Parede();
        p.AdicionaVertices(14 - larguraParede - 13 - 5 - larguraParede - 10, 14 - larguraParede - 13 - 5 - 10, 35 - 14 + 7 - larguraParede, 35 - 14 + 7 - larguraParede - 6);
        p.DefineCoordenadasIniciais(x, y);
        StartGL_Quads();
        GL.Color(new Color(0.33f, 0.47f, 0.23f));
        p.CriarParede();
        EndGLPopMatrix();
        ParedesMapa.Add(p);

        p = new Parede();
        p.AdicionaVertices(14 - larguraParede - 13, 14 - larguraParede - 13 + 8, 35 - 14, 35 - 14 + larguraParede);
        p.DefineCoordenadasIniciais(x, y);
        StartGL_Quads();
        GL.Color(new Color(0.33f, 0.47f, 0.23f));
        p.CriarParede();
        EndGLPopMatrix();
        ParedesMapa.Add(p);

        p = new Parede();
        p.AdicionaVertices(14 - larguraParede - 13 + 8, 14 - larguraParede - 13 + 8 - larguraParede, 35 - 14, 35 - 14 - 12);
        p.DefineCoordenadasIniciais(x, y);
        StartGL_Quads();
        GL.Color(new Color(0.33f, 0.47f, 0.23f));
        p.CriarParede();
        EndGLPopMatrix();
        ParedesMapa.Add(p);
    }

    private void PersonagemJogo_Vertical()
    {

        StartGL_Quads();

        #region CHARACTER_COLORS
        var BACKPACK = new Color(0.44f, 0.47f, 0.34f);
        var BACKPACK_TIP = new Color(0.39f, 0.31f, 0.25f);
        var BACKPACK_HANDLE = BACKPACK_TIP;
        var HAT_DOWN = new Color(0.92f, 0.85f, 0.71f);
        var HAT_UP = new Color(0.97f, 0.9f, 0.76f);
        var SHOULDER = HAT_UP;
        var SHOULDER_TIP = new Color(0.95f, 0.88f, 0.75f);
        #endregion

        #region BACKPACK
        GL.Color(BACKPACK);
        GL.Vertex3((-3 * proportion) + personagemJogoX, (1.2f * proportion * direcao) + personagemJogoY, 0);
        GL.Vertex3((11 * proportion) + personagemJogoX, (1.2f * proportion * direcao) + personagemJogoY, 0);
        GL.Vertex3((11 * proportion) + personagemJogoX, (-1.7f * proportion * direcao) + personagemJogoY, 0);
        GL.Vertex3((-3 * proportion) + personagemJogoX, (-1.7f * proportion * direcao) + personagemJogoY, 0);

        GL.Color(BACKPACK_TIP);
        GL.Vertex3(11 * proportion + personagemJogoX, 1.2f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(12 * proportion + personagemJogoX, 1.2f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(12 * proportion + personagemJogoX, -1.7f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(11 * proportion + personagemJogoX, -1.7f * proportion * direcao + personagemJogoY, 0);

        GL.Vertex3(-3 * proportion + personagemJogoX, 1.2f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(-4 * proportion + personagemJogoX, 1.2f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(-4 * proportion + personagemJogoX, -1.7f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(-3 * proportion + personagemJogoX, -1.7f * proportion * direcao + personagemJogoY, 0);
        #endregion

        #region HAT
        GL.Color(HAT_DOWN);
        GL.Vertex3(0 * proportion + personagemJogoX, 0.2f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(0 * proportion + personagemJogoX, 7.8f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(8 * proportion + personagemJogoX, 7.8f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(8 * proportion + personagemJogoX, 0.2f * proportion * direcao + personagemJogoY, 0);

        GL.Color(HAT_UP);
        GL.Vertex3(1.8f * proportion + personagemJogoX, 1.8f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(1.8f * proportion + personagemJogoX, 6.2f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(6.2f * proportion + personagemJogoX, 6.2f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(6.2f * proportion + personagemJogoX, 1.8f * proportion * direcao + personagemJogoY, 0);
        #endregion

        #region LEFT_SHOULDER
        GL.Color(SHOULDER);
        GL.Vertex3(0f * proportion + personagemJogoX, 1.8f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(-1.5f * proportion + personagemJogoX, 1.8f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(-1.5f * proportion + personagemJogoX, 4.2f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(0f * proportion + personagemJogoX, 4.2f * proportion * direcao + personagemJogoY, 0);

        GL.Color(SHOULDER_TIP);
        GL.Vertex3(-1.5f * proportion + personagemJogoX, 1.8f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(-2f * proportion + personagemJogoX, 1.8f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(-2f * proportion + personagemJogoX, 4.2f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(-1.5f * proportion + personagemJogoX, 4.2f * proportion * direcao + personagemJogoY, 0);
        #endregion

        #region RIGHT_SHOULDER
        GL.Color(SHOULDER);
        GL.Vertex3(8 * proportion + personagemJogoX, 1.8f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(9.5f * proportion + personagemJogoX, 1.8f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(9.5f * proportion + personagemJogoX, 4.2f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(8 * proportion + personagemJogoX, 4.2f * proportion * direcao + personagemJogoY, 0);

        GL.Color(SHOULDER_TIP);
        GL.Vertex3(9.5f * proportion + personagemJogoX, 1.8f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(10 * proportion + personagemJogoX, 1.8f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(10 * proportion + personagemJogoX, 4.2f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(9.5f * proportion + personagemJogoX, 4.2f * proportion * direcao + personagemJogoY, 0);
        #endregion

        #region BACKPACK_HANDLE
        GL.Color(BACKPACK_HANDLE);
        GL.Vertex3(0f * proportion + personagemJogoX, 1.2f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(-0.5f * proportion + personagemJogoX, 1.2f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(-0.5f * proportion + personagemJogoX, 4.2f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(0f * proportion + personagemJogoX, 4.2f * proportion * direcao + personagemJogoY, 0);

        GL.Vertex3(8 * proportion + personagemJogoX, 1.2f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(8.5f * proportion + personagemJogoX, 1.2f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(8.5f * proportion + personagemJogoX, 4.2f * proportion * direcao + personagemJogoY, 0);
        GL.Vertex3(8 * proportion + personagemJogoX, 4.2f * proportion * direcao + personagemJogoY, 0);
        #endregion

        EndGLPopMatrix();
    }

    private void PersonagemJogo_Horizontal()
    {
        StartGL_Quads();

        #region CHARACTER_COLORS
        var BACKPACK = new Color(0.44f, 0.47f, 0.34f);
        var BACKPACK_TIP = new Color(0.39f, 0.31f, 0.25f);
        var BACKPACK_HANDLE = BACKPACK_TIP;
        var HAT_DOWN = new Color(0.92f, 0.85f, 0.71f);
        var HAT_UP = new Color(0.97f, 0.9f, 0.76f);
        var SHOULDER = HAT_UP;
        var SHOULDER_TIP = new Color(0.95f, 0.88f, 0.75f);
        #endregion

        #region BACKPACK
        GL.Color(BACKPACK);
        GL.Vertex3((-3 * proportion * direcao) + personagemJogoX, (-3f * proportion) + personagemJogoY, 0);
        GL.Vertex3((-3 * proportion * direcao) + personagemJogoX, (11 * proportion) + personagemJogoY, 0);
        GL.Vertex3((1.2f * proportion * direcao) + personagemJogoX, (11 * proportion) + personagemJogoY, 0);
        GL.Vertex3((1.2f * proportion * direcao) + personagemJogoX, (-3f * proportion) + personagemJogoY, 0);

        GL.Color(BACKPACK_TIP);
        GL.Vertex3(-3 * proportion * direcao + personagemJogoX, 11 * proportion + personagemJogoY, 0);
        GL.Vertex3(-3 * proportion * direcao + personagemJogoX, 12 * proportion + personagemJogoY, 0);
        GL.Vertex3(1.2f * proportion * direcao + personagemJogoX, 12 * proportion + personagemJogoY, 0);
        GL.Vertex3(1.2f * proportion * direcao + personagemJogoX, 11 * proportion + personagemJogoY, 0);

        GL.Vertex3(-3 * proportion * direcao + personagemJogoX, -3f * proportion + personagemJogoY, 0);
        GL.Vertex3(-3 * proportion * direcao + personagemJogoX, -4f * proportion + personagemJogoY, 0);
        GL.Vertex3(1.2f * proportion * direcao + personagemJogoX, -4f * proportion + personagemJogoY, 0);
        GL.Vertex3(1.2f * proportion * direcao + personagemJogoX, -3f * proportion + personagemJogoY, 0);

        #endregion

        #region HAT
        GL.Color(HAT_DOWN);
        GL.Vertex3(0 * proportion * direcao + personagemJogoX, 0.2f * proportion + personagemJogoY, 0);
        GL.Vertex3(7.8f * proportion * direcao + personagemJogoX, 0.2f * proportion + personagemJogoY, 0);
        GL.Vertex3(7.8f * proportion * direcao + personagemJogoX, 8 * proportion + personagemJogoY, 0);
        GL.Vertex3(0 * proportion * direcao + personagemJogoX, 8 * proportion + personagemJogoY, 0);

        GL.Color(HAT_UP);
        GL.Vertex3(1.8f * proportion * direcao + personagemJogoX, 1.8f * proportion + personagemJogoY, 0);
        GL.Vertex3(1.8f * proportion * direcao + personagemJogoX, 6.2f * proportion + personagemJogoY, 0);
        GL.Vertex3(6.2f * proportion * direcao + personagemJogoX, 6.2f * proportion + personagemJogoY, 0);
        GL.Vertex3(6.2f * proportion * direcao + personagemJogoX, 1.8f * proportion + personagemJogoY, 0);
        #endregion

        #region LEFT_SHOULDER
        GL.Color(SHOULDER);
        GL.Vertex3(1.8f * proportion * direcao + personagemJogoX, 8 * proportion + personagemJogoY, 0);
        GL.Vertex3(1.8f * proportion * direcao + personagemJogoX, 9.5f * proportion + personagemJogoY, 0);
        GL.Vertex3(4.2f * proportion * direcao + personagemJogoX, 9.5f * proportion + personagemJogoY, 0);
        GL.Vertex3(4.2f * proportion * direcao + personagemJogoX, 8 * proportion + personagemJogoY, 0);

        GL.Color(SHOULDER_TIP);
        GL.Vertex3(1.8f * proportion * direcao + personagemJogoX, 9.5f * proportion + personagemJogoY, 0);
        GL.Vertex3(1.8f * proportion * direcao + personagemJogoX, 10 * proportion + personagemJogoY, 0);
        GL.Vertex3(4.2f * proportion * direcao + personagemJogoX, 10 * proportion + personagemJogoY, 0);
        GL.Vertex3(4.2f * proportion * direcao + personagemJogoX, 9.5f * proportion + personagemJogoY, 0);
        #endregion

        #region RIGHT_SHOULDER
        GL.Color(SHOULDER);
        GL.Vertex3(1.8f * proportion * direcao + personagemJogoX, 0.2f * proportion + personagemJogoY, 0);
        GL.Vertex3(1.8f * proportion * direcao + personagemJogoX, -1.3f * proportion + personagemJogoY, 0);
        GL.Vertex3(4.2f * proportion * direcao + personagemJogoX, -1.3f * proportion + personagemJogoY, 0);
        GL.Vertex3(4.2f * proportion * direcao + personagemJogoX, 0.2f * proportion + personagemJogoY, 0);

        GL.Color(SHOULDER_TIP);
        GL.Vertex3(1.8f * proportion * direcao + personagemJogoX, -1.3f * proportion + personagemJogoY, 0);
        GL.Vertex3(1.8f * proportion * direcao + personagemJogoX, -1.8f * proportion + personagemJogoY, 0);
        GL.Vertex3(4.2f * proportion * direcao + personagemJogoX, -1.8f * proportion + personagemJogoY, 0);
        GL.Vertex3(4.2f * proportion * direcao + personagemJogoX, -1.3f * proportion + personagemJogoY, 0);
        #endregion

        #region BACKPACK_HANDLE
        GL.Color(BACKPACK_HANDLE);
        GL.Vertex3(1.2f * proportion * direcao + personagemJogoX, 8 * proportion + personagemJogoY, 0);
        GL.Vertex3(4.2f * proportion * direcao + personagemJogoX, 8 * proportion + personagemJogoY, 0);
        GL.Vertex3(4.2f * proportion * direcao + personagemJogoX, 8.5f * proportion + personagemJogoY, 0);
        GL.Vertex3(1.2f * proportion * direcao + personagemJogoX, 8.5f * proportion + personagemJogoY, 0);

        GL.Vertex3(1.2f * proportion * direcao + personagemJogoX, 0.2f * proportion + personagemJogoY, 0);
        GL.Vertex3(4.2f * proportion * direcao + personagemJogoX, 0.2f * proportion + personagemJogoY, 0);
        GL.Vertex3(4.2f * proportion * direcao + personagemJogoX, -0.3f * proportion + personagemJogoY, 0);
        GL.Vertex3(1.2f * proportion * direcao + personagemJogoX, -0.3f * proportion + personagemJogoY, 0);
        #endregion

        EndGLPopMatrix();
    }

    private void StartGL_Quads()
    {
        GL.PushMatrix();
        mat.SetPass(0);
        GL.Begin(GL.QUADS);
    }

    private static void EndGLPopMatrix()
    {
        GL.End();
        GL.PopMatrix();
    }
}

public class Parede
{
    public Ponto Vertice1 { get; set; }
    public Ponto Vertice2 { get; set; }
    public Ponto Vertice3 { get; set; }
    public Ponto Vertice4 { get; set; }
    public Sentido Sentido { get; set; }
    
    public Parede()
    {

    }  

    public Parede(Ponto vertice1, Ponto vertice2, Ponto vertice3, Ponto vertice4, Sentido sentido)
    {
        Vertice1 = vertice1;
        Vertice2 = vertice2;
        Vertice3 = vertice3;
        Vertice4 = vertice4;
        Sentido = sentido;
    }

    public void AdicionarVertice1(float x, float y) => Vertice1 = new Ponto(x, y);
    public void AdicionarVertice1(Ponto ponto) => Vertice1 = new Ponto(ponto);

    public void AdicionarVertice2(float x, float y) => Vertice2 = new Ponto(x, y);
    public void AdicionarVertice2(Ponto ponto) => Vertice2 = new Ponto(ponto);

    public void AdicionarVertice3(float x, float y) => Vertice3 = new Ponto(x, y);
    public void AdicionarVertice3(Ponto ponto) => Vertice3 = new Ponto(ponto);

    public void AdicionarVertice4(float x, float y) => Vertice4 = new Ponto(x, y);
    public void AdicionarVertice4(Ponto ponto) => Vertice4 = new Ponto(ponto);

    public void AdicionaVertices(float x1, float x2, float y1, float y2)
    {
        Vertice1 = new Ponto(x1, y1);
        Vertice2 = new Ponto(x1, y2);
        Vertice3 = new Ponto(x2, y2);
        Vertice4 = new Ponto(x2, y1);
    }

    public void CriarParede()
    {
        GL.Vertex3(Vertice1.X, Vertice1.Y, 0);
        GL.Vertex3(Vertice2.X, Vertice2.Y, 0);
        GL.Vertex3(Vertice3.X, Vertice3.Y, 0);
        GL.Vertex3(Vertice4.X, Vertice4.Y, 0);
        
    }

    public void DefineCoordenadasIniciais(float x, float y)
    {
        Vertice1.addX(x);
        Vertice2.addX(x);
        Vertice3.addX(x);
        Vertice4.addX(x);
        Vertice1.addY(y);
        Vertice2.addY(y);
        Vertice3.addY(y);
        Vertice4.addY(y);
    }

}

public class Ponto
{    
    public float X { get; set; }
    public float Y { get; set; }

    public Ponto(float x, float y)
    {
        X = x;
        Y = y;
    }

    public Ponto(Ponto ponto)
    {
        this.X = ponto.X;
        this.Y = ponto.Y;
    }

    public void addX(float value)
    {
        this.X += value;
    }

    public void addY(float value)
    {
        this.Y += value;
    }

}

public enum Sentido
{
    Horizontal,
    Vertical
}